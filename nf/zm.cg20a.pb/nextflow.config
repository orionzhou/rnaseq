launchDir = "$proj/rnaseq/nf/zm.cg20a.pb"
workDir = "$NXF_CACHE/work/rnaseq/zm.cg20a.pb"

includeConfig "$nf/configs/nextflow.config"
includeConfig "$nf/configs/fastq.config"
includeConfig "$nf/configs/rnaseq.config"

params {
  genome = 'Zmays_B73v5'
  name = 'zm.cg20a.pb'
  design = 'design.tsv'
  source = 'local'
  read_type = 'nanopore'
  paired = 'SE'
  outdir = "./raw"
  s3dir = "./raw"
  tracedir = "./pipeline_info"
  stranded = 'no'
  interleaved = false
  save_fastq = false
  trimmer = "no"
  save_trimmed = false
  aligner = "minimap2"
  saveBAM = true
  skip_preseq = true
  skip_markdup = true
  skip_qualimap = true
  run_salmon = false
  run_stringtie = false
  count_multi = false
  ase = false
  ril = false
  cage = false
}

def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
